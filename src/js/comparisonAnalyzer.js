/**
 * –ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
 * –í–∫–ª—é—á–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
export class ComparisonAnalyzer {
    constructor() {
        this.sequences = [];
        this.patterns = [];
        this.statistics = {};
        this.isInitialized = false;
        this.charts = {};
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
     */
    async init() {
        try {
            console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            this.initializePatterns();
            
            this.isInitialized = true;
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    initializePatterns() {
        this.patterns = [
            {
                name: '–ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∏–≥–∞—é—Ç 1',
                condition: (seq) => seq.statistics.length < 20,
                color: '#10b981'
            },
            {
                name: '–î–ª–∏–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤',
                condition: (seq) => seq.statistics.length > 100,
                color: '#ef4444'
            },
            {
                name: '–í—ã—Å–æ–∫–∏–π –ø–∏–∫',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                condition: (seq) => seq.statistics.maxValue > 10000,
                color: '#f59e0b'
            },
            {
                name: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏',
                condition: (seq) => {
                    const values = seq.sequence;
                    const avg = values.reduce((a, b) => a + b, 0) / values.length;
                    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;
                    return Math.sqrt(variance) < avg * 0.5;
                },
                color: '#3b82f6'
            },
            {
                name: '–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏',
                condition: (seq) => this.hasCyclicPattern(seq.sequence),
                color: '#8b5cf6'
            },
            {
                name: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±—ã—Å—Ç—Ä—ã–º —Ä–æ—Å—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π',
                condition: (seq) => this.hasExponentialGrowth(seq.sequence),
                color: '#ec4899'
            },
            {
                name: '–ü–ª–∞–≤–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å',
                description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–≤–Ω—ã–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º',
                condition: (seq) => this.hasSmoothConvergence(seq.sequence),
                color: '#06b6d4'
            }
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @returns {boolean} –ï—Å—Ç—å –ª–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     */
    hasCyclicPattern(sequence) {
        if (sequence.length < 6) return false;
        
        // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for (let len = 2; len <= Math.min(10, Math.floor(sequence.length / 2)); len++) {
            for (let start = 0; start <= sequence.length - len * 2; start++) {
                const pattern = sequence.slice(start, start + len);
                const nextPattern = sequence.slice(start + len, start + len * 2);
                
                if (pattern.every((val, idx) => val === nextPattern[idx])) {
                    return true;
                }
            }
        }
        
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @returns {boolean} –ï—Å—Ç—å –ª–∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
     */
    hasExponentialGrowth(sequence) {
        if (sequence.length < 5) return false;
        
        let growthCount = 0;
        for (let i = 1; i < sequence.length; i++) {
            if (sequence[i] > sequence[i-1] * 1.5) {
                growthCount++;
            }
        }
        
        return growthCount >= Math.floor(sequence.length * 0.3);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≤–Ω—É—é —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @returns {boolean} –ï—Å—Ç—å –ª–∏ –ø–ª–∞–≤–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
     */
    hasSmoothConvergence(sequence) {
        if (sequence.length < 10) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30% –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const checkLength = Math.floor(sequence.length * 0.3);
        const endSequence = sequence.slice(-checkLength);
        
        let decreasingCount = 0;
        for (let i = 1; i < endSequence.length; i++) {
            if (endSequence[i] <= endSequence[i-1]) {
                decreasingCount++;
            }
        }
        
        return decreasingCount >= Math.floor(endSequence.length * 0.7);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @param {Object} sequence - –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    addSequence(sequence) {
        this.sequences.push({
            ...sequence,
            id: sequence.id || `seq_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            addedAt: new Date(),
            patterns: this.detectPatterns(sequence),
            cycles: this.findCycles(sequence.sequence),
            convergenceAnalysis: this.analyzeConvergence(sequence.sequence)
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatistics();
    }

    /**
     * –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @returns {Array} –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
     */
    findCycles(sequence) {
        const cycles = [];
        
        // –ò—â–µ–º —Ü–∏–∫–ª—ã —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
        for (let cycleLength = 2; cycleLength <= Math.min(20, Math.floor(sequence.length / 2)); cycleLength++) {
            for (let start = 0; start <= sequence.length - cycleLength * 2; start++) {
                const cycle = sequence.slice(start, start + cycleLength);
                let repeatCount = 1;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                for (let offset = cycleLength; offset <= sequence.length - cycleLength; offset += cycleLength) {
                    const nextCycle = sequence.slice(start + offset, start + offset + cycleLength);
                    if (cycle.every((val, idx) => val === nextCycle[idx])) {
                        repeatCount++;
                    } else {
                        break;
                    }
                }
                
                if (repeatCount >= 2) {
                    cycles.push({
                        length: cycleLength,
                        start: start,
                        repeats: repeatCount,
                        pattern: cycle,
                        totalLength: cycleLength * repeatCount
                    });
                }
            }
        }
        
        return cycles;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     * @returns {Object} –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    analyzeConvergence(sequence) {
        const analysis = {
            convergenceType: 'unknown',
            convergenceSpeed: 0,
            oscillationLevel: 0,
            stabilityScore: 0
        };
        
        if (sequence.length < 3) return analysis;
        
        // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–µ–±–∞–Ω–∏–π
        let oscillations = 0;
        for (let i = 1; i < sequence.length - 1; i++) {
            const prev = sequence[i-1];
            const curr = sequence[i];
            const next = sequence[i+1];
            
            if ((curr > prev && curr > next) || (curr < prev && curr < next)) {
                oscillations++;
            }
        }
        
        analysis.oscillationLevel = oscillations / (sequence.length - 2);
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        const differences = [];
        for (let i = 1; i < sequence.length; i++) {
            differences.push(Math.abs(sequence[i] - sequence[i-1]));
        }
        
        const avgDifference = differences.reduce((a, b) => a + b, 0) / differences.length;
        const maxDifference = Math.max(...differences);
        analysis.stabilityScore = 1 - (avgDifference / maxDifference);
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        const lastValues = sequence.slice(-Math.min(10, Math.floor(sequence.length * 0.2)));
        const isDecreasing = lastValues.every((val, idx) => idx === 0 || val <= lastValues[idx-1]);
        const isConverging = lastValues[lastValues.length - 1] <= Math.max(...lastValues) * 0.5;
        
        if (isDecreasing && isConverging) {
            analysis.convergenceType = 'smooth';
            analysis.convergenceSpeed = 1 - analysis.oscillationLevel;
        } else if (analysis.oscillationLevel > 0.5) {
            analysis.convergenceType = 'oscillating';
            analysis.convergenceSpeed = 0.5;
        } else {
            analysis.convergenceType = 'irregular';
            analysis.convergenceSpeed = 0.3;
        }
        
        return analysis;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {string} sequenceId - ID –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    removeSequence(sequenceId) {
        this.sequences = this.sequences.filter(seq => seq.id !== sequenceId);
        this.updateStatistics();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    clearSequences() {
        this.sequences = [];
        this.updateStatistics();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatistics() {
        if (this.sequences.length === 0) {
            this.statistics = {};
            return;
        }

        const lengths = this.sequences.map(seq => seq.statistics.length);
        const maxValues = this.sequences.map(seq => seq.statistics.maxValue);
        const stepCounts = this.sequences.map(seq => seq.statistics.steps);

        this.statistics = {
            totalSequences: this.sequences.length,
            averageLength: lengths.reduce((a, b) => a + b, 0) / lengths.length,
            minLength: Math.min(...lengths),
            maxLength: Math.max(...lengths),
            averageMaxValue: maxValues.reduce((a, b) => a + b, 0) / maxValues.length,
            minMaxValue: Math.min(...maxValues),
            maxMaxValue: Math.max(...maxValues),
            averageSteps: stepCounts.reduce((a, b) => a + b, 0) / stepCounts.length,
            minSteps: Math.min(...stepCounts),
            maxSteps: Math.max(...stepCounts),
            patterns: this.analyzePatternDistribution(),
            correlations: this.calculateCorrelations(),
            cycles: this.analyzeCycles(),
            convergence: this.analyzeOverallConvergence()
        };
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–æ–≤
     */
    analyzeCycles() {
        const cycleStats = {
            totalCycles: 0,
            averageCycleLength: 0,
            mostCommonCycleLength: 0,
            sequencesWithCycles: 0
        };
        
        const cycleLengths = [];
        let totalCycles = 0;
        let sequencesWithCycles = 0;
        
        this.sequences.forEach(seq => {
            if (seq.cycles && seq.cycles.length > 0) {
                sequencesWithCycles++;
                seq.cycles.forEach(cycle => {
                    cycleLengths.push(cycle.length);
                    totalCycles++;
                });
            }
        });
        
        if (cycleLengths.length > 0) {
            cycleStats.totalCycles = totalCycles;
            cycleStats.averageCycleLength = cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length;
            cycleStats.sequencesWithCycles = sequencesWithCycles;
            
            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞
            const lengthCounts = {};
            cycleLengths.forEach(length => {
                lengthCounts[length] = (lengthCounts[length] || 0) + 1;
            });
            
            cycleStats.mostCommonCycleLength = Object.entries(lengthCounts)
                .sort(([,a], [,b]) => b - a)[0][0];
        }
        
        return cycleStats;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    analyzeOverallConvergence() {
        const convergenceTypes = {};
        const speeds = [];
        const stabilities = [];
        
        this.sequences.forEach(seq => {
            if (seq.convergenceAnalysis) {
                const type = seq.convergenceAnalysis.convergenceType;
                convergenceTypes[type] = (convergenceTypes[type] || 0) + 1;
                speeds.push(seq.convergenceAnalysis.convergenceSpeed);
                stabilities.push(seq.convergenceAnalysis.stabilityScore);
            }
        });
        
        return {
            types: convergenceTypes,
            averageSpeed: speeds.length > 0 ? speeds.reduce((a, b) => a + b, 0) / speeds.length : 0,
            averageStability: stabilities.length > 0 ? stabilities.reduce((a, b) => a + b, 0) / stabilities.length : 0,
            dominantType: Object.entries(convergenceTypes).sort(([,a], [,b]) => b - a)[0]?.[0] || 'unknown'
        };
    }

    /**
     * –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Object} sequence - –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    detectPatterns(sequence) {
        const detectedPatterns = [];
        
        this.patterns.forEach(pattern => {
            if (pattern.condition(sequence)) {
                detectedPatterns.push({
                    name: pattern.name,
                    description: pattern.description,
                    color: pattern.color
                });
            }
        });

        return detectedPatterns;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    analyzePatternDistribution() {
        const patternCounts = {};
        
        this.patterns.forEach(pattern => {
            patternCounts[pattern.name] = 0;
        });

        this.sequences.forEach(sequence => {
            sequence.patterns.forEach(pattern => {
                patternCounts[pattern.name]++;
            });
        });

        return patternCounts;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
     * @returns {Object} –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
     */
    calculateCorrelations() {
        if (this.sequences.length < 2) return {};

        const properties = this.sequences.map(seq => ({
            startNumber: seq.startNumber,
            length: seq.statistics.length,
            maxValue: seq.statistics.maxValue,
            steps: seq.statistics.steps
        }));

        return {
            lengthVsMaxValue: this.calculateCorrelation(
                properties.map(p => p.length),
                properties.map(p => p.maxValue)
            ),
            startNumberVsLength: this.calculateCorrelation(
                properties.map(p => p.startNumber),
                properties.map(p => p.length)
            ),
            startNumberVsMaxValue: this.calculateCorrelation(
                properties.map(p => p.startNumber),
                properties.map(p => p.maxValue)
            ),
            stepsVsLength: this.calculateCorrelation(
                properties.map(p => p.steps),
                properties.map(p => p.length)
            )
        };
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞
     * @param {Array} x - –ü–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
     * @param {Array} y - –í—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
     * @returns {number} –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
     */
    calculateCorrelation(x, y) {
        const n = x.length;
        if (n !== y.length || n === 0) return 0;

        const sumX = x.reduce((a, b) => a + b, 0);
        const sumY = y.reduce((a, b) => a + b, 0);
        const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
        const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
        const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);

        const numerator = n * sumXY - sumX * sumY;
        const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));

        return denominator === 0 ? 0 : numerator / denominator;
    }

    /**
     * –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–Ω–æ–º–∞–ª–∏–π
     */
    findAnomalies() {
        const anomalies = [];
        
        if (this.sequences.length < 3) return anomalies;

        const lengths = this.sequences.map(seq => seq.statistics.length);
        const maxValues = this.sequences.map(seq => seq.statistics.maxValue);

        // –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –¥–ª–∏–Ω–µ
        const lengthStats = this.calculateOutlierStats(lengths);
        this.sequences.forEach((seq, index) => {
            if (lengths[index] > lengthStats.upperBound || lengths[index] < lengthStats.lowerBound) {
                anomalies.push({
                    type: 'length',
                    sequence: seq,
                    value: lengths[index],
                    description: `–î–ª–∏–Ω–∞ ${lengths[index]} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`,
                    severity: this.calculateAnomalySeverity(lengths[index], lengthStats)
                });
            }
        });

        // –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        const maxValueStats = this.calculateOutlierStats(maxValues);
        this.sequences.forEach((seq, index) => {
            if (maxValues[index] > maxValueStats.upperBound || maxValues[index] < maxValueStats.lowerBound) {
                anomalies.push({
                    type: 'maxValue',
                    sequence: seq,
                    value: maxValues[index],
                    description: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${maxValues[index]} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`,
                    severity: this.calculateAnomalySeverity(maxValues[index], maxValueStats)
                });
            }
        });

        // –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
        this.sequences.forEach(seq => {
            if (seq.patterns.length === 0) {
                anomalies.push({
                    type: 'pattern',
                    sequence: seq,
                    value: 'no_patterns',
                    description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É',
                    severity: 'medium'
                });
            }
        });

        return anomalies;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–∏
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ
     * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     * @returns {string} –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
     */
    calculateAnomalySeverity(value, stats) {
        const distance = Math.abs(value - (stats.q1 + stats.q3) / 2);
        const iqr = stats.iqr;
        
        if (distance > iqr * 3) return 'high';
        if (distance > iqr * 2) return 'medium';
        return 'low';
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
     * @param {Array} values - –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
     */
    calculateOutlierStats(values) {
        const sorted = [...values].sort((a, b) => a - b);
        const q1 = sorted[Math.floor(sorted.length * 0.25)];
        const q3 = sorted[Math.floor(sorted.length * 0.75)];
        const iqr = q3 - q1;
        
        return {
            q1,
            q3,
            iqr,
            lowerBound: q1 - 1.5 * iqr,
            upperBound: q3 + 1.5 * iqr
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @returns {Object} –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    generateComparisonReport() {
        return {
            timestamp: new Date(),
            totalSequences: this.sequences.length,
            statistics: this.statistics,
            patterns: this.analyzePatternDistribution(),
            anomalies: this.findAnomalies(),
            correlations: this.calculateCorrelations(),
            cycles: this.analyzeCycles(),
            convergence: this.analyzeOverallConvergence(),
            sequences: this.sequences.map(seq => ({
                id: seq.id,
                startNumber: seq.startNumber,
                length: seq.statistics.length,
                maxValue: seq.statistics.maxValue,
                patterns: seq.patterns,
                cycles: seq.cycles,
                convergenceAnalysis: seq.convergenceAnalysis
            }))
        };
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @param {string} format - –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('json', 'csv')
     * @returns {string} –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    exportComparisonData(format = 'json') {
        const report = this.generateComparisonReport();
        
        if (format === 'json') {
            return JSON.stringify(report, null, 2);
        } else if (format === 'csv') {
            return this.convertToCSV(report);
        }
        
        return '';
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV —Ñ–æ—Ä–º–∞—Ç
     * @param {Object} report - –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @returns {string} CSV –¥–∞–Ω–Ω—ã–µ
     */
    convertToCSV(report) {
        const headers = ['ID', 'Start Number', 'Length', 'Max Value', 'Patterns', 'Cycles', 'Convergence Type'];
        const rows = report.sequences.map(seq => [
            seq.id,
            seq.startNumber,
            seq.length,
            seq.maxValue,
            seq.patterns.map(p => p.name).join('; '),
            seq.cycles ? seq.cycles.length : 0,
            seq.convergenceAnalysis ? seq.convergenceAnalysis.convergenceType : 'unknown'
        ]);
        
        return [headers, ...rows]
            .map(row => row.map(cell => `"${cell}"`).join(','))
            .join('\n');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
     * @param {string} patternName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
     */
    getSequencesByPattern(patternName) {
        return this.sequences.filter(seq => 
            seq.patterns.some(pattern => pattern.name === patternName)
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
     * @param {number} minStart - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
     * @param {number} maxStart - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    getStatisticsByRange(minStart, maxStart) {
        const filteredSequences = this.sequences.filter(seq => 
            seq.startNumber >= minStart && seq.startNumber <= maxStart
        );

        if (filteredSequences.length === 0) return {};

        const lengths = filteredSequences.map(seq => seq.statistics.length);
        const maxValues = filteredSequences.map(seq => seq.statistics.maxValue);

        return {
            count: filteredSequences.length,
            averageLength: lengths.reduce((a, b) => a + b, 0) / lengths.length,
            averageMaxValue: maxValues.reduce((a, b) => a + b, 0) / maxValues.length,
            minLength: Math.min(...lengths),
            maxLength: Math.max(...lengths),
            minMaxValue: Math.min(...maxValues),
            maxMaxValue: Math.max(...maxValues)
        };
    }

    /**
     * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     * @param {number} startNumber - –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
     * @returns {Object} –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
     */
    predictProperties(startNumber) {
        if (this.sequences.length < 5) {
            return {
                confidence: 0,
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'
            };
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const similarSequences = this.sequences
            .filter(seq => Math.abs(seq.startNumber - startNumber) <= 10)
            .sort((a, b) => Math.abs(a.startNumber - startNumber) - Math.abs(b.startNumber - startNumber));

        if (similarSequences.length === 0) {
            return {
                confidence: 0.1,
                message: '–ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'
            };
        }

        const avgLength = similarSequences.reduce((sum, seq) => sum + seq.statistics.length, 0) / similarSequences.length;
        const avgMaxValue = similarSequences.reduce((sum, seq) => sum + seq.statistics.maxValue, 0) / similarSequences.length;

        const confidence = Math.min(0.9, similarSequences.length / 10);

        return {
            confidence,
            predictedLength: Math.round(avgLength),
            predictedMaxValue: Math.round(avgMaxValue),
            similarSequences: similarSequences.length,
            patterns: this.findCommonPatterns(similarSequences)
        };
    }

    /**
     * –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     * @param {Array} sequences - –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     * @returns {Array} –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     */
    findCommonPatterns(sequences) {
        const patternCounts = {};
        
        sequences.forEach(seq => {
            seq.patterns.forEach(pattern => {
                patternCounts[pattern.name] = (patternCounts[pattern.name] || 0) + 1;
            });
        });

        return Object.entries(patternCounts)
            .filter(([, count]) => count >= Math.ceil(sequences.length * 0.3))
            .map(([name, count]) => ({
                name,
                frequency: count / sequences.length
            }));
    }
} 