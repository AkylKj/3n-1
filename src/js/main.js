// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import { CollatzAlgorithm } from './algorithm.js';
import { DataManager } from './dataManager.js';
import { Visualization2D } from './visualization2d.js';
import { Visualization3D } from './visualization3d.js';
import { UIController } from './uiController.js';
import { Utils } from './utils.js';
import { TabManager } from './tabManager.js';
import { AdvancedVisualization } from './advancedVisualization.js';
import { ComparisonAnalyzer } from './comparisonAnalyzer.js';

class App {
    constructor() {
        this.dataManager = new DataManager();
        this.uiController = new UIController();
        this.tabManager = new TabManager();
        this.comparisonAnalyzer = new ComparisonAnalyzer();
        this.visualization2D = null;
        this.visualization3D = null;
        this.advancedVisualization = null;
        this.isInitialized = false;
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
            await this.uiController.init();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
            console.log('üìë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫...');
            await this.tabManager.init();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
            console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π...');
            await this.comparisonAnalyzer.init();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...');
            await this.initVisualizations();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
            this.setupEventListeners();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
            console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞...');
            this.loadExample();
            
            this.isInitialized = true;
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    async initVisualizations() {
        try {
            console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            console.log('üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...');
            this.visualization2D = new Visualization2D();
            await this.visualization2D.init();
            console.log('‚úÖ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 2D...');
            this.visualization2D.setupInteractivity();
            console.log('‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2D –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
            console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...');
            this.visualization3D = new Visualization3D();
            await this.visualization3D.init();
            console.log('‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...');
            this.advancedVisualization = new AdvancedVisualization();
            await this.advancedVisualization.init();
            console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:', error);
            throw error;
        }
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã—á–∏—Å–ª–∏—Ç—å"
        const calculateBtn = document.getElementById('calculateBtn');
        console.log('üîò –ö–Ω–æ–ø–∫–∞ "–í—ã—á–∏—Å–ª–∏—Ç—å":', calculateBtn);
        if (calculateBtn) {
            calculateBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã—á–∏—Å–ª–∏—Ç—å"');
                this.handleCalculate();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–í—ã—á–∏—Å–ª–∏—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ä–∞–≤–Ω–∏—Ç—å"
        const compareBtn = document.getElementById('compareBtn');
        console.log('üîò –ö–Ω–æ–ø–∫–∞ "–°—Ä–∞–≤–Ω–∏—Ç—å":', compareBtn);
        if (compareBtn) {
            compareBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–°—Ä–∞–≤–Ω–∏—Ç—å"');
                this.handleCompare();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–°—Ä–∞–≤–Ω–∏—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const clearComparisonBtn = document.getElementById('clearComparisonBtn');
        if (clearComparisonBtn) {
            clearComparisonBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"');
                this.clearComparison();
            });
        }

        const exportComparisonBtn = document.getElementById('exportComparisonBtn');
        if (exportComparisonBtn) {
            exportComparisonBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"');
                this.exportComparison();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const numberInput = document.getElementById('numberInput');
        console.log('üìù –ü–æ–ª–µ –≤–≤–æ–¥–∞:', numberInput);
        if (numberInput) {
            numberInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    console.log('‚å®Ô∏è –ù–∞–∂–∞—Ç Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
                    this.handleCalculate();
                }
            });
        } else {
            console.error('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        const reset3dBtn = document.getElementById('reset3dBtn');
        if (reset3dBtn) {
            reset3dBtn.addEventListener('click', () => {
                if (this.visualization3D) {
                    this.visualization3D.resetCamera();
                }
            });
        }

        const toggle3dAnimationBtn = document.getElementById('toggle3dAnimationBtn');
        if (toggle3dAnimationBtn) {
            toggle3dAnimationBtn.addEventListener('click', () => {
                if (this.visualization3D) {
                    this.visualization3D.toggleAnimation();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.handleResize());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫
        document.addEventListener('tabChanged', (e) => {
            this.handleTabChange(e.detail);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫
        document.addEventListener('tabResize', (e) => {
            this.handleTabResize(e.detail);
        });
    }

    async handleCalculate() {
        console.log('üîç handleCalculate –≤—ã–∑–≤–∞–Ω');
        
        const input = document.getElementById('numberInput');
        console.log('üìù Input —ç–ª–µ–º–µ–Ω—Ç:', input);
        
        const number = parseInt(input.value);
        console.log('üî¢ –í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ:', number);

        if (!number || number < 1) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ');
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
            return;
        }

        if (number > 1000000) {
            console.log('‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ');
            this.showError('–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º: 1,000,000');
            return;
        }

        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ...');
            // –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.uiController.showLoading();
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            console.log('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');
            const sequence = CollatzAlgorithm.generateSequence(number);
            console.log('‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', sequence.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ DataManager
            console.log('üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ DataManager...');
            const sequenceData = this.dataManager.addSequence(number, sequence);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã:', sequenceData);
            
            // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
            console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏...');
            this.updateUIWithAnimations(sequenceData);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            console.log('üìà –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...');
            await this.updateVisualizations();
            
            console.log('‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            // –°–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.uiController.hideLoading();
            
            // –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.showSuccessWithAnimation(`–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —á–∏—Å–ª–∞ ${number} —É—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∞!`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            this.uiController.hideLoading();
        }
    }

    async handleCompare() {
        const input = document.getElementById('numberInput');
        const number = parseInt(input.value);

        if (!number || number < 1) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const numbersToCompare = [number, number + 1, number + 2, number + 3, number + 5, number + 7];
        
        try {
            this.showLoading(true);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.comparisonAnalyzer.clearSequences();
            
            for (const num of numbersToCompare) {
                const sequence = CollatzAlgorithm.generateSequence(num);
                const sequenceData = this.dataManager.addSequence(num, sequence);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
                this.comparisonAnalyzer.addSequence(sequenceData);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            await this.updateVisualizations();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.showComparisonPanel();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.updateComparisonCharts();
            
            this.showLoading(false);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π');
            this.showLoading(false);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    showComparisonPanel() {
        const panel = document.getElementById('comparisonPanel');
        if (panel) {
            panel.style.display = 'block';
            panel.scrollIntoView({ behavior: 'smooth' });
        }
        
        this.updateComparisonStatistics();
        this.updateComparisonTables();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    updateComparisonStatistics() {
        const report = this.comparisonAnalyzer.generateComparisonReport();
        const anomalies = this.comparisonAnalyzer.findAnomalies();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('totalSequences').textContent = report.totalSequences;
        document.getElementById('averageLength').textContent = report.statistics.averageLength?.toFixed(1) || '-';
        document.getElementById('averageMaxValue').textContent = report.statistics.averageMaxValue?.toLocaleString() || '-';
        document.getElementById('anomaliesCount').textContent = anomalies.length;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.animateComparisonStatistics();
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    animateComparisonStatistics() {
        const statElements = document.querySelectorAll('#comparisonStatistics .stat-card p');
        statElements.forEach(element => {
            element.style.transform = 'scale(1.1)';
            element.style.transition = 'transform 0.3s ease';
            setTimeout(() => {
                element.style.transform = 'scale(1)';
            }, 300);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    updateComparisonTables() {
        const report = this.comparisonAnalyzer.generateComparisonReport();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        this.updatePatternsList(report.patterns);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–æ–º–∞–ª–∏–π
        this.updateAnomaliesList(report.anomalies);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        this.updateSequencesTable(report.sequences);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    updatePatternsList(patterns) {
        const patternsList = document.getElementById('patternsList');
        if (!patternsList) return;
        
        const activePatterns = Object.entries(patterns).filter(([, count]) => count > 0);
        
        if (activePatterns.length === 0) {
            patternsList.innerHTML = '<p class="text-text-secondary text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>';
            return;
        }
        
        patternsList.innerHTML = activePatterns.map(([pattern, count]) => `
            <div class="flex items-center justify-between p-2 bg-surface rounded">
                <span class="text-sm">${pattern}</span>
                <span class="text-xs bg-primary text-white px-2 py-1 rounded">${count}</span>
            </div>
        `).join('');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
     */
    updateAnomaliesList(anomalies) {
        const anomaliesList = document.getElementById('anomaliesList');
        if (!anomaliesList) return;
        
        if (anomalies.length === 0) {
            anomaliesList.innerHTML = '<p class="text-text-secondary text-sm">–ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>';
            return;
        }
        
        anomaliesList.innerHTML = anomalies.map(anomaly => `
            <div class="p-2 bg-surface rounded border-l-4 border-${this.getSeverityColor(anomaly.severity)}">
                <div class="text-sm font-medium">${anomaly.sequence.startNumber}</div>
                <div class="text-xs text-text-secondary">${anomaly.description}</div>
            </div>
        `).join('');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
     */
    getSeverityColor(severity) {
        switch (severity) {
            case 'high': return 'error';
            case 'medium': return 'warning';
            case 'low': return 'success';
            default: return 'secondary';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    updateSequencesTable(sequences) {
        const tableBody = document.getElementById('sequencesTableBody');
        if (!tableBody) return;
        
        if (sequences.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="5" class="text-center py-4 text-text-secondary">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>';
            return;
        }
        
        tableBody.innerHTML = sequences.map(seq => `
            <tr class="border-b border-secondary/20 hover:bg-surface/50">
                <td class="py-2 px-3">${seq.startNumber}</td>
                <td class="py-2 px-3">${seq.length}</td>
                <td class="py-2 px-3">${seq.maxValue.toLocaleString()}</td>
                <td class="py-2 px-3">
                    <div class="flex flex-wrap gap-1">
                        ${seq.patterns.map(pattern => 
                            `<span class="text-xs px-2 py-1 rounded" style="background-color: ${pattern.color}20; color: ${pattern.color}">${pattern.name}</span>`
                        ).join('')}
                    </div>
                </td>
                <td class="py-2 px-3">
                    <button onclick="app.removeSequenceFromComparison('${seq.id}')" class="text-xs text-error hover:text-error/80">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    removeSequenceFromComparison(sequenceId) {
        this.comparisonAnalyzer.removeSequence(sequenceId);
        this.updateComparisonStatistics();
        this.updateComparisonTables();
        this.updateComparisonCharts();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    updateComparisonCharts() {
        this.createComparisonChart();
        this.createCorrelationChart();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    createComparisonChart() {
        const ctx = document.getElementById('comparisonChart');
        if (!ctx) return;
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        if (this.comparisonAnalyzer.charts.comparison) {
            this.comparisonAnalyzer.charts.comparison.destroy();
        }
        
        const sequences = this.comparisonAnalyzer.sequences;
        const labels = sequences.map(seq => seq.startNumber);
        const lengths = sequences.map(seq => seq.statistics.length);
        const maxValues = sequences.map(seq => seq.statistics.maxValue);
        
        this.comparisonAnalyzer.charts.comparison = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                        data: lengths,
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: 'rgba(59, 130, 246, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (√∑100)',
                        data: maxValues.map(v => v / 100),
                        backgroundColor: 'rgba(245, 158, 11, 0.8)',
                        borderColor: 'rgba(245, 158, 11, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#ffffff'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#a1a1aa'
                        },
                        grid: {
                            color: 'rgba(100, 116, 139, 0.2)'
                        }
                    },
                    y: {
                        ticks: {
                            color: '#a1a1aa'
                        },
                        grid: {
                            color: 'rgba(100, 116, 139, 0.2)'
                        }
                    }
                }
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
     */
    createCorrelationChart() {
        const ctx = document.getElementById('correlationChart');
        if (!ctx) return;
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        if (this.comparisonAnalyzer.charts.correlation) {
            this.comparisonAnalyzer.charts.correlation.destroy();
        }
        
        const correlations = this.comparisonAnalyzer.calculateCorrelations();
        const labels = Object.keys(correlations).map(key => 
            key.replace('Vs', ' vs ').replace(/([A-Z])/g, ' $1')
        );
        const values = Object.values(correlations);
        
        this.comparisonAnalyzer.charts.correlation = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: labels,
                datasets: [{
                    label: '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
                    data: values,
                    backgroundColor: 'rgba(139, 92, 246, 0.2)',
                    borderColor: 'rgba(139, 92, 246, 1)',
                    borderWidth: 2,
                    pointBackgroundColor: 'rgba(139, 92, 246, 1)',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#ffffff'
                        }
                    }
                },
                scales: {
                    r: {
                        beginAtZero: true,
                        max: 1,
                        min: -1,
                        ticks: {
                            color: '#a1a1aa',
                            stepSize: 0.5
                        },
                        grid: {
                            color: 'rgba(100, 116, 139, 0.2)'
                        },
                        pointLabels: {
                            color: '#a1a1aa'
                        }
                    }
                }
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    clearComparison() {
        this.comparisonAnalyzer.clearSequences();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const panel = document.getElementById('comparisonPanel');
        if (panel) {
            panel.style.display = 'none';
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        if (this.comparisonAnalyzer.charts.comparison) {
            this.comparisonAnalyzer.charts.comparison.destroy();
            this.comparisonAnalyzer.charts.comparison = null;
        }
        if (this.comparisonAnalyzer.charts.correlation) {
            this.comparisonAnalyzer.charts.correlation.destroy();
            this.comparisonAnalyzer.charts.correlation = null;
        }
        
        this.showSuccess('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    exportComparison() {
        try {
            const jsonData = this.comparisonAnalyzer.exportComparisonData('json');
            const csvData = this.comparisonAnalyzer.exportComparisonData('csv');
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const jsonBlob = new Blob([jsonData], { type: 'application/json' });
            const csvBlob = new Blob([csvData], { type: 'text/csv' });
            
            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const jsonUrl = URL.createObjectURL(jsonBlob);
            const csvUrl = URL.createObjectURL(csvBlob);
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const jsonLink = document.createElement('a');
            jsonLink.href = jsonUrl;
            jsonLink.download = `comparison_${timestamp}.json`;
            jsonLink.click();
            
            const csvLink = document.createElement('a');
            csvLink.href = csvUrl;
            csvLink.download = `comparison_${timestamp}.csv`;
            csvLink.click();
            
            // –û—á–∏—â–∞–µ–º URL
            URL.revokeObjectURL(jsonUrl);
            URL.revokeObjectURL(csvUrl);
            
            this.showSuccess('–î–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    updateUI(sequenceData) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const stats = sequenceData.statistics;
        
        document.getElementById('sequenceLength').textContent = stats.length;
        document.getElementById('maxValue').textContent = stats.maxValue.toLocaleString();
        document.getElementById('stepCount').textContent = stats.steps;
        document.getElementById('status').textContent = stats.hasReachedOne ? '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '‚ö† –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.updateSequenceDetails(sequenceData);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.animateStatistics();
    }

    updateUIWithAnimations(sequenceData) {
        console.log('üé® –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏:', sequenceData);
        
        // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        this.updateSequenceDetailsWithAnimations(sequenceData);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.animateStatistics();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        this.uiController.updateUI();
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ–∞–Ω–∏–º–∞—Ü–∏–π
        this.uiController.addMicroAnimations();
    }

    updateSequenceDetailsWithAnimations(sequenceData) {
        const stats = {
            sequenceLength: sequenceData.statistics.length,
            maxValue: sequenceData.statistics.maxValue.toLocaleString(),
            stepCount: sequenceData.statistics.steps,
            status: sequenceData.statistics.hasReachedOne ? '‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '‚ö† –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        
        // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        this.uiController.updateStatisticsWithAnimation(stats);
    }

    updateSequenceDetails(sequenceData) {
        const detailsContainer = document.getElementById('sequenceDetails');
        const sequence = sequenceData.sequence;
        
        let detailsHTML = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const showFirst = 20;
        const showLast = 10;
        
        if (sequence.length <= showFirst + showLast) {
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
            detailsHTML = sequence.map((num, index) => 
                `<span class="sequence-number">${num}</span>${index < sequence.length - 1 ? ' ‚Üí ' : ''}`
            ).join('');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const firstPart = sequence.slice(0, showFirst).map((num, index) => 
                `<span class="sequence-number">${num}</span>${index < showFirst - 1 ? ' ‚Üí ' : ''}`
            ).join('');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
            const middlePart = `<span class="sequence-step">... (${sequence.length - showFirst - showLast} —ç–ª–µ–º–µ–Ω—Ç–æ–≤) ...</span>`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const lastPart = sequence.slice(-showLast).map((num, index) => 
                `<span class="sequence-number">${num}</span>${index < showLast - 1 ? ' ‚Üí ' : ''}`
            ).join('');
            
            detailsHTML = firstPart + ' ‚Üí ' + middlePart + ' ‚Üí ' + lastPart;
        }
        
        detailsContainer.innerHTML = detailsHTML;
    }

    animateStatistics() {
        const statElements = document.querySelectorAll('.stat-value');
        statElements.forEach(element => {
            element.classList.add('updated');
            setTimeout(() => {
                element.classList.remove('updated');
            }, 300);
        });
    }

    async updateVisualizations() {
        const sequences = this.dataManager.getSequences();
        
        if (sequences.length === 0) return;
        
        try {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.visualization2D) {
                await this.visualization2D.update(sequences);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.visualization3D) {
                await this.visualization3D.update(sequences);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            if (this.advancedVisualization) {
                this.advancedVisualization.updateCharts(sequences);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:', error);
        }
    }

    handleResize() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if (this.visualization2D) {
            this.visualization2D.resize();
        }
        
        if (this.visualization3D) {
            this.visualization3D.resize();
        }

        if (this.advancedVisualization) {
            this.advancedVisualization.handleResize();
        }
    }

    loadExample() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å —á–∏—Å–ª–æ–º 27 (–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª–∏–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        document.getElementById('numberInput').value = '27';
    }

    showLoading(show) {
        const loadingElements = document.querySelectorAll('[id$="Loading"]');
        loadingElements.forEach(element => {
            element.classList.toggle('hidden', !show);
        });
    }

    showError(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-error text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slide-up';
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showSuccess(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-success text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slide-up';
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showSuccessWithAnimation(message) {
        const successDiv = document.createElement('div');
        successDiv.className = 'fixed top-4 right-4 bg-success text-white px-6 py-3 rounded-lg shadow-lg z-50';
        successDiv.innerHTML = `
            <div class="flex items-center space-x-2">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                </svg>
                <span>${message}</span>
            </div>
        `;
        
        document.body.appendChild(successDiv);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –ø–ª–∞–≤–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        successDiv.style.opacity = '0';
        successDiv.style.transform = 'translateX(100%) scale(0.9)';
        
        setTimeout(() => {
            successDiv.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
            successDiv.style.opacity = '1';
            successDiv.style.transform = 'translateX(0) scale(1)';
        }, 100);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
        setTimeout(() => {
            successDiv.style.transform = 'translateX(0) scale(1.05)';
            setTimeout(() => {
                successDiv.style.transform = 'translateX(0) scale(1)';
            }, 150);
        }, 600);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            successDiv.style.opacity = '0';
            successDiv.style.transform = 'translateX(100%) scale(0.9)';
            setTimeout(() => {
                if (document.body.contains(successDiv)) {
                    document.body.removeChild(successDiv);
                }
            }, 500);
        }, 4000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} detail - –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏
     */
    async handleTabChange(detail) {
        const { tabId } = detail;
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏: ${tabId}`);
        
        try {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            if (tabId === '2d') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                const sequences = this.dataManager.getSequences();
                if (sequences.length > 0 && this.visualization2D) {
                    await this.visualization2D.update(sequences);
                }
            } else if (tabId === '3d') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                const sequences = this.dataManager.getSequences();
                if (sequences.length > 0 && this.visualization3D) {
                    await this.visualization3D.update(sequences);
                }
            } else if (tabId === 'advanced') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                const sequences = this.dataManager.getSequences();
                if (sequences.length > 0 && this.advancedVisualization) {
                    this.advancedVisualization.updateCharts(sequences);
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            this.tabManager.saveTabStateData(tabId, {
                lastVisited: Date.now(),
                hasData: this.dataManager.getSequences().length > 0
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} detail - –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    async handleTabResize(detail) {
        const { tabId } = detail;
        console.log(`üìè –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏: ${tabId}`);
        
        try {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            if (tabId === '2d' && this.visualization2D) {
                this.visualization2D.resize();
            } else if (tabId === '3d' && this.visualization3D) {
                this.visualization3D.resize();
            } else if (tabId === 'advanced' && this.advancedVisualization) {
                this.advancedVisualization.handleResize();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    const app = new App();
    await app.init();
    
    // –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.app = app;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
}); 