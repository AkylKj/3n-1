/**
 * –ú–æ–¥—É–ª—å 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Three.js
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D —Å—Ü–µ–Ω
 */

import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

export class Visualization3D {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.controls = null;
        this.stats = null;
        this.container = null;
        this.isInitialized = false;
        this.isAnimating = false;
        this.animationId = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã
        this.settings = {
            backgroundColor: 0x1a1a1a,
            gridSize: 100,
            gridDivisions: 20,
            cameraDistance: 50,
            pointSize: 0.5,
            lineWidth: 2,
            animationSpeed: 0.01
        };
        
        // –û–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã
        this.objects = {
            grid: null,
            axes: null,
            sequences: new Map(),
            labels: []
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.cameraState = {
            position: new THREE.Vector3(30, 30, 30),
            target: new THREE.Vector3(0, 0, 0)
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async init() {
        try {
            console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container = document.getElementById('chart3d');
            if (!this.container) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
            this.initScene();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
            this.initCamera();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            this.initRenderer();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
            this.initControls();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.initStats();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            this.createGrid();
            this.createAxes();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            this.animate();
            
            this.isInitialized = true;
            console.log('‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
     */
    initScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(this.settings.backgroundColor);
        this.scene.fog = new THREE.Fog(this.settings.backgroundColor, 50, 200);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
        this.setupLighting();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è —Å—Ü–µ–Ω—ã
     */
    setupLighting() {
        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
        this.scene.add(ambientLight);
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(50, 50, 50);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 2048;
        directionalLight.shadow.mapSize.height = 2048;
        this.scene.add(directionalLight);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        const pointLight = new THREE.PointLight(0x3b82f6, 0.5, 100);
        pointLight.position.set(-50, 50, -50);
        this.scene.add(pointLight);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
        this.lights = {
            ambient: ambientLight,
            directional: directionalLight,
            point: pointLight
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
     */
    initCamera() {
        const aspect = this.container.clientWidth / this.container.clientHeight;
        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);
        this.camera.position.copy(this.cameraState.position);
        this.camera.lookAt(this.cameraState.target);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
     */
    initRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            canvas: this.container,
            antialias: true,
            alpha: false
        });
        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –∫–∞–º–µ—Ä—ã
     */
    initControls() {
        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.screenSpacePanning = false;
        this.controls.minDistance = 10;
        this.controls.maxDistance = 200;
        this.controls.maxPolarAngle = Math.PI;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        this.controls.addEventListener('change', () => {
            this.updateCameraInfo();
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    initStats() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Stats.js –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        this.stats = null;
        console.log('üìä Stats.js –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    createGrid() {
        const gridHelper = new THREE.GridHelper(
            this.settings.gridSize, 
            this.settings.gridDivisions,
            0x444444,
            0x222222
        );
        gridHelper.position.y = 0;
        this.scene.add(gridHelper);
        this.objects.grid = gridHelper;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    createAxes() {
        const axesHelper = new THREE.AxesHelper(20);
        this.scene.add(axesHelper);
        this.objects.axes = axesHelper;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã
        const resetBtn = document.getElementById('reset3dBtn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => this.resetCamera());
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const animationBtn = document.getElementById('toggle3dAnimationBtn');
        if (animationBtn) {
            animationBtn.addEventListener('click', () => this.toggleAnimation());
        }

        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.setupTooltips();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.handleResize());
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    setupTooltips() {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        this.tooltip = document.createElement('div');
        this.tooltip.className = 'fixed bg-background/90 text-text-primary px-3 py-2 rounded-lg shadow-lg text-sm pointer-events-none z-50 hidden';
        this.tooltip.style.backdropFilter = 'blur(8px)';
        document.body.appendChild(this.tooltip);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        this.renderer.domElement.addEventListener('mousemove', (event) => {
            this.handleMouseMove(event);
        });

        this.renderer.domElement.addEventListener('mouseleave', () => {
            this.hideTooltip();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    handleMouseMove(event) {
        const rect = this.renderer.domElement.getBoundingClientRect();
        const mouse = new THREE.Vector2();
        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(mouse, this.camera);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        const intersects = raycaster.intersectObjects(this.scene.children, true);
        
        if (intersects.length > 0) {
            const intersect = intersects[0];
            this.showTooltip(intersect, event);
        } else {
            this.hideTooltip();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    showTooltip(intersect, event) {
        const object = intersect.object;
        let tooltipText = '';

        if (object.userData && object.userData.text) {
            tooltipText = object.userData.text;
        } else if (object.parent && object.parent.name && object.parent.name.startsWith('sequence-')) {
            const sequenceId = object.parent.name.replace('sequence-', '');
            const sequence = this.objects.sequences.get(sequenceId);
            if (sequence) {
                tooltipText = `–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${sequenceId}`;
            }
        }

        if (tooltipText) {
            this.tooltip.textContent = tooltipText;
            this.tooltip.style.left = event.clientX + 10 + 'px';
            this.tooltip.style.top = event.clientY - 10 + 'px';
            this.tooltip.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    hideTooltip() {
        this.tooltip.classList.add('hidden');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D —Å—Ü–µ–Ω—ã
     * @param {Array} sequences - –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    async update(sequences) {
        if (!this.isInitialized) return;
        
        console.log('üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D —Å—Ü–µ–Ω—ã:', sequences.length, '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π');
        
        try {
            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            this.clearSequences();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            for (const sequenceData of sequences) {
                await this.createSequenceVisualization(sequenceData);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            this.fitCameraToSequences();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3D —Å—Ü–µ–Ω—ã:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ 3D –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Object} sequenceData - –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async createSequenceVisualization(sequenceData) {
        const { id, sequence, color, startNumber } = sequenceData;
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const sequenceGroup = new THREE.Group();
        sequenceGroup.name = `sequence-${id}`;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const points = this.createSequencePoints(sequence, color);
        sequenceGroup.add(points);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ —Ç–æ—á–∫–∏
        const lines = this.createSequenceLines(sequence, color);
        sequenceGroup.add(lines);
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–æ—á–µ–∫
        const labels = this.createSequenceLabels(sequence, startNumber, color);
        labels.forEach(label => sequenceGroup.add(label));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å—Ü–µ–Ω—É
        this.scene.add(sequenceGroup);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
        this.objects.sequences.set(id, sequenceGroup);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.animateSequenceAppearance(sequenceGroup);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
     * @param {string} color - –¶–≤–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @returns {THREE.Points} –û–±—ä–µ–∫—Ç —Ç–æ—á–µ–∫
     */
    createSequencePoints(sequence, color) {
        const positions = [];
        const colors = [];
        const sizes = [];
        
        const colorObj = new THREE.Color(color);
        
        sequence.forEach((value, index) => {
            // –ü–æ–∑–∏—Ü–∏—è: X = –∏–Ω–¥–µ–∫—Å, Y = –∑–Ω–∞—á–µ–Ω–∏–µ, Z = 0
            positions.push(index, value, 0);
            
            // –¶–≤–µ—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const intensity = Math.min(value / 1000, 1);
            colors.push(
                colorObj.r * intensity,
                colorObj.g * intensity,
                colorObj.b * intensity
            );
            
            // –†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            sizes.push(Math.max(0.2, Math.min(2, value / 100)));
        });
        
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
        geometry.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));
        
        const material = new THREE.PointsMaterial({
            size: this.settings.pointSize,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
            sizeAttenuation: true,
            blending: THREE.AdditiveBlending,
            depthWrite: false
        });
        
        return new THREE.Points(geometry, material);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
     * @param {string} color - –¶–≤–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @returns {THREE.LineSegments} –û–±—ä–µ–∫—Ç –ª–∏–Ω–∏–π
     */
    createSequenceLines(sequence, color) {
        const positions = [];
        const colors = [];
        
        const colorObj = new THREE.Color(color);
        
        for (let i = 0; i < sequence.length - 1; i++) {
            const current = sequence[i];
            const next = sequence[i + 1];
            
            // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞
            positions.push(i, current, 0);
            colors.push(colorObj.r, colorObj.g, colorObj.b);
            
            // –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞
            positions.push(i + 1, next, 0);
            colors.push(colorObj.r, colorObj.g, colorObj.b);
        }
        
        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
        
        const material = new THREE.LineBasicMaterial({
            color: colorObj,
            transparent: true,
            opacity: 0.6,
            linewidth: this.settings.lineWidth,
            blending: THREE.AdditiveBlending,
            depthWrite: false
        });
        
        return new THREE.LineSegments(geometry, material);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Array} sequence - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
     * @param {number} startNumber - –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
     * @param {string} color - –¶–≤–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –º–µ—Ç–æ–∫
     */
    createSequenceLabels(sequence, startNumber, color) {
        const labels = [];
        const colorObj = new THREE.Color(color);
        
        // –ú–µ—Ç–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
        if (sequence.length > 0) {
            const startLabel = this.createTextLabel(
                `–ù–∞—á–∞–ª–æ: ${startNumber}`,
                new THREE.Vector3(0, sequence[0], 2),
                colorObj
            );
            labels.push(startLabel);
        }
        
        // –ú–µ—Ç–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const maxValue = Math.max(...sequence);
        const maxIndex = sequence.indexOf(maxValue);
        if (maxIndex > 0) {
            const maxLabel = this.createTextLabel(
                `–ú–∞–∫—Å: ${maxValue}`,
                new THREE.Vector3(maxIndex, maxValue, 2),
                new THREE.Color(0xff6b6b)
            );
            labels.push(maxLabel);
        }
        
        // –ú–µ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (sequence.length > 1) {
            const endLabel = this.createTextLabel(
                `–ö–æ–Ω–µ—Ü: ${sequence[sequence.length - 1]}`,
                new THREE.Vector3(sequence.length - 1, sequence[sequence.length - 1], 2),
                new THREE.Color(0x51cf66)
            );
            labels.push(endLabel);
        }
        
        return labels;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–µ—Ç–∫–∏
     * @param {string} text - –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏
     * @param {THREE.Vector3} position - –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–∫–∏
     * @param {THREE.Color} color - –¶–≤–µ—Ç –º–µ—Ç–∫–∏
     * @returns {THREE.Mesh} –û–±—ä–µ–∫—Ç –º–µ—Ç–∫–∏
     */
    createTextLabel(text, position, color) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –º–µ—Ç–∫–∏
        const geometry = new THREE.SphereGeometry(0.3, 8, 8);
        const material = new THREE.MeshBasicMaterial({ color });
        
        const label = new THREE.Mesh(geometry, material);
        label.position.copy(position);
        label.userData = { text, type: 'label' };
        
        return label;
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {THREE.Group} sequenceGroup - –ì—Ä—É–ø–ø–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    animateSequenceAppearance(sequenceGroup) {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–± 0
        sequenceGroup.children.forEach(child => {
            if (child.material) {
                child.material.opacity = 0;
            }
            child.scale.setScalar(0);
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        sequenceGroup.children.forEach((child, index) => {
            setTimeout(() => {
                this.animateChildAppearance(child);
            }, index * 50); // –ó–∞–¥–µ—Ä–∂–∫–∞ 50–º—Å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {THREE.Object3D} child - –î–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç
     */
    animateChildAppearance(child) {
        let progress = 0;
        const duration = 0.5; // 500–º—Å
        const startTime = Date.now();
        
        const animate = () => {
            const elapsed = (Date.now() - startTime) / 1000;
            progress = Math.min(1, elapsed / duration);
            
            // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å easing
            const easeProgress = this.easeOutCubic(progress);
            
            if (child.material) {
                child.material.opacity = easeProgress;
            }
            child.scale.setScalar(easeProgress);
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        
        animate();
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
     * @param {number} t - –í—Ä–µ–º—è (0-1)
     * @returns {number} –ü–ª–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    easeOutCubic(t) {
        return 1 - Math.pow(1 - t, 3);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    clearSequences() {
        this.objects.sequences.forEach((group, id) => {
            this.scene.remove(group);
            group.traverse(child => {
                if (child.geometry) child.geometry.dispose();
                if (child.material) child.material.dispose();
            });
        });
        this.objects.sequences.clear();
        
        // –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–æ–∫
        this.objects.labels.forEach(label => {
            this.scene.remove(label);
        });
        this.objects.labels = [];
    }

    /**
     * –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–∞–º–µ—Ä—ã –ø–æ–¥ –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    fitCameraToSequences() {
        if (this.objects.sequences.size === 0) return;
        
        const box = new THREE.Box3();
        
        this.objects.sequences.forEach(group => {
            group.traverse(child => {
                if (child.geometry) {
                    box.expandByObject(child);
                }
            });
        });
        
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        const maxDim = Math.max(size.x, size.y, size.z);
        const distance = maxDim * 2;
        
        this.camera.position.set(
            center.x + distance,
            center.y + distance,
            center.z + distance
        );
        this.camera.lookAt(center);
        
        this.controls.target.copy(center);
        this.controls.update();
    }

    /**
     * –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
     */
    resetCamera() {
        this.camera.position.copy(this.cameraState.position);
        this.camera.lookAt(this.cameraState.target);
        this.controls.target.copy(this.cameraState.target);
        this.controls.update();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    toggleAnimation() {
        this.isAnimating = !this.isAnimating;
        const btn = document.getElementById('toggle3dAnimationBtn');
        if (btn) {
            btn.textContent = this.isAnimating ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ê–Ω–∏–º–∞—Ü–∏—è';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ
     */
    updateCameraInfo() {
        const cameraInfo = document.getElementById('cameraInfo');
        if (cameraInfo) {
            const pos = this.camera.position;
            cameraInfo.textContent = `X: ${pos.x.toFixed(1)}, Y: ${pos.y.toFixed(1)}, Z: ${pos.z.toFixed(1)}`;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        if (!this.container || !this.camera || !this.renderer) return;
        
        const width = this.container.clientWidth;
        const height = this.container.clientHeight;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    animate() {
        this.animationId = requestAnimationFrame(() => this.animate());
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        this.updateFPSInfo();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
        if (this.controls) {
            this.controls.update();
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.isAnimating) {
            this.animateObjects();
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ü–µ–Ω—ã
        this.renderer.render(this.scene, this.camera);
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã
     */
    animateObjects() {
        const time = Date.now() * this.settings.animationSpeed;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        this.objects.sequences.forEach((group, sequenceId) => {
            group.children.forEach((child, index) => {
                if (child instanceof THREE.Points) {
                    // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫
                    child.rotation.y = Math.sin(time + index * 0.1) * 0.05;
                    
                    // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ—á–µ–∫
                    const scale = 1 + Math.sin(time * 2 + index * 0.2) * 0.1;
                    child.scale.setScalar(scale);
                }
                
                if (child instanceof THREE.LineSegments) {
                    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ª–∏–Ω–∏–π
                    if (child.material) {
                        child.material.opacity = 0.4 + Math.sin(time + index * 0.3) * 0.2;
                    }
                }
            });
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –º–µ—Ç–æ–∫
        this.objects.labels.forEach((label, index) => {
            // –ü—É–ª—å—Å–∞—Ü–∏—è –º–µ—Ç–æ–∫
            const scale = 1 + Math.sin(time * 3 + index * 0.5) * 0.15;
            label.scale.setScalar(scale);
            
            // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –º–µ—Ç–æ–∫
            label.rotation.y = Math.sin(time * 0.5 + index * 0.2) * 0.1;
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ç–∫–∏
        if (this.objects.grid) {
            this.objects.grid.rotation.y = Math.sin(time * 0.1) * 0.02;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è
        if (this.lights) {
            // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞
            this.lights.directional.intensity = 0.6 + Math.sin(time * 0.5) * 0.2;
            
            // –í—Ä–∞—â–µ–Ω–∏–µ —Ç–æ—á–µ—á–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—Ç–∞
            this.lights.point.position.x = Math.sin(time * 0.3) * 50;
            this.lights.point.position.z = Math.cos(time * 0.3) * 50;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ FPS
     */
    updateFPSInfo() {
        const fpsInfo = document.getElementById('fpsInfo');
        if (fpsInfo) {
            // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è FPS
            fpsInfo.textContent = '60';
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ 3D —Å—Ü–µ–Ω—ã
     */
    resize() {
        this.handleResize();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        this.clearSequences();
        
        if (this.renderer) {
            this.renderer.dispose();
        }
        
        if (this.scene) {
            this.scene.traverse(child => {
                if (child.geometry) child.geometry.dispose();
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => material.dispose());
                    } else {
                        child.material.dispose();
                    }
                }
            });
        }
    }
} 